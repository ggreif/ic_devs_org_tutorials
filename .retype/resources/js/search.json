[[{"l":"Who we are","p":["… for the use and development of the Internet Computer and related technologies. It pursues activities such as","\uD83C\uDFD8️ community organization","\uD83D\uDCB0 funding","\uD83D\uDCD6 educational resources","\uD83D\uDD2C scientific discovery","conferences","developer funding","educational material development","educational symposiums","ICDevs.org (registered as The Internet Computer Developers Education and Discovery Corporation) is a 501(c)3 Texas Non-profit.","ICDevs.org is completely independent from the DFINITY Foundation and the ICA. Our goal is to further diversify and decentralize the Internet Computer ecosystem. By providing a United States-based non-profit organization we open up new, tax-advantaged ways, for US-based proponents of the Internet Computer to organize their resources and influence to advance the Ideals of the Internet Computer.","ICDevs.org seeks to provide the general public with","Meet our Board and Advisors","Meet our Developer Advisory Committee","open-source systems funding","Read our Bylaws","scientific and technology development","strategic community organization"]},{"i":"what-is-the-internet-computer","l":"♾️ What is the Internet Computer","p":["From : Dfinity docs","The Internet Computer is a blockchain that enables developers, organizations, and entrepreneurs to build and deploy secure, autonomous, and tamper-proof software programs.","As an application developer, you might find it useful to think of the Internet Computer as providing the following key elements:","An open communication protocol that enables general-purpose computations to run transparently directly on the internet A network that runs the protocol to provide computing capacity—for example, the hardware, CPU, and memory required to run programs—through independent data centers. A globally-accessible and scalable blockchain platform for running software applications.","ICDevs.org believes in a future where a significant portion of enterprise and consumer information management and commerces occurs with the Internet Computer involved. Our goal is that most people will be using the Internet Computer without knowing that they are doing so. To reach this goal we need a significant number of well-trained and well-equipped developers to build the infrastructure that seamlessly melds real-world activity into trustless computing infrastructure.","Places to learn more:","Dfinity IC Community Start Developing"]}],[{"l":"Basics"},{"i":"install---create---run","l":"Install - Create - Run","p":["Install SDK","Get version","Create a new project","Start local network - the flag is for running on background","Stop local network","Upgrade dfx version","Get Candid uri ulr"]}],[{"l":"Getting to know the motoko playground","p":["Motoko playground is a simple web interface that allows you to write and deploy motoko code in your web browser. It is a #1 choice for developers that just have started getting to know about the Internet Computer ecosystem and want to learn motoko programing language.","Motoko is a programing language developed natively for the Internet Computer blockchain. If you want to learn more about Motoko, visit the documentation page."]},{"l":"Start first project","p":["You can easily open Motoko playground by visiting this link https://m7sm4-2iaaa-aaaab-qabra-cai.raw.ic0.app/","Create a new project","You should se a modal window simmilar to the screen above that is basically giving you three options:","Create a new blank project","Open one of the pre-prepared projects","Import code from public Github repo","If you want to start coding from scratch, clicking on New Motoko project is the best option for you. In this tutorial, let's click on the Counter example so we can demonstrate how to use the playground.","This will get you the a Readme file that describes the project and presents how to deploy the code locally on your computer. As Motoko playground is working in the browser, you don't need to set up your local development enviroment and install the SKD now. Skip this and just click to the Main.mo file on the left hand side. This will bring you to the code.","Counter example code","This is how your workspace looks. On the left, you can manage files in your project, load packages and other canisters (smart contracts). In the bottom is a little console that shows you logs, this is where you look for error messagess when deploying. In the top right there is a Deploy button that we will use for deploying and testing our code."]},{"l":"Deploy your code","p":["Counter example is a very simple project to start with. Explaining the code in detail is above the scope of this tutorial but we will briefly go through it just to see what we can expect.","The actor has a stable variable counter, that will store the number of the counter and 3 public funcitons – get, set and inc. These functions form a public interface of our canister and we will see them in the generated Candid interface after deploy.","Candid is an IDL (interface definition language) developed for the IC ecosystem in order to facilitate communication between services written in different programing languages. You can read more about it here.","Motoko playground not only allows you to write and deploy your code, it also generates a Candid UI so you can test the functionality. Click on the deploy button to see it in action.","Deploying the project","First, you need to confirm the deploy by selecting a canister name and set up a garbage collector strategy. You can keep the settings as it is for now and click Install. You should see a success message in the console log.","Motoko Playground is really deploying your canister to the network. As it serves for educational and testing purposes only, there are some limitations such as only 1 GB of data can be used and the canister will expier after 20 minutes. Using this playground is very convinient for new devs learning Motoko, as you don't have to pay for cycles fees for deployment, which you would need to do when deploying to the mainnet directly."]},{"l":"Experiment with Candid UI","p":["If your project deployed successfully, you now should see a Candid UI on your right-hand side.","Candind UI","As we mentioned above, Candid UI follows the interface defined in your Motoko code. You should see a form consisting of three functions get, inc and set. Function get and inc is not expecting any argument so you can click on Query or Call button and experiment with it. Function set is expecting a natural number (Nat) that you can pass in the input field.","You will notice that query functions have very fast execution usually in terms of miliseconds. On the other hand, functions calling an update usually takes about 2 seconds."]},{"l":"Update your code","p":["Once you start practicing Motoko, you will want to update your code frequently. Just click on the Deploy button again, it is going to ask you if you want to Upgrade or Reinstall the code. If you choose update, the stable memory will stay. On the opposite, reinstalling canister will refresh the memory.","If you make significant changes to the code, you might get notified that the update will not be compatible with the previous version and the playground makes you reinstall the whole canister.","Let's make an easy exercise right now. Try to update your code with a new function dec, that will decrease the counter of 1 each time. Remember, the counter should not go below zero."]},{"i":"save--share-your-code","l":"Save & share your code","p":["You know might want to save your code so you can open it later. You can either save the code and keep in in a local file or click on the Save & Share button in the top-right corner. This will generate you an unique link that you can come back to later."]},{"l":"Useful resources and links","p":["If you want to experiment with more exapmles of Motoko code. You can again click on the Open tutorial button in the top right corner. More examples can be found in this GitHub repo which was made by Dfinity foundation. Lastly, there is a no-code Motoko editor Blocks which contains some examples too and the Build & Run button will deploy your code via Motoko Playground as well.","Medium article a Yan Chen from Dfinity Foundation about Motoko Playground: https://medium.com/dfinity/introducing-the-motoko-playground-an-online-development-environment-for-the-internet-computer-efb4cd09ea8b","Community converstaion from Dfinity also with Yan Chen about Motoko Playground: https://www.youtube.com/watch?v=A_RbxhN0BHI","Link to a Motoko documentation page: https://smartcontracts.org/docs/language-guide/motoko.html"]}],[{"l":"Primitive data types","p":["Types play a significant role in Motoko language. Compared to modern general purpose languages such as Python, Motoko is very strict about types. This have a good purpose as it helps preventing Motoko programs to go wrong as mentioned in the documentation page.","For example, each variable in a Motoko program carries an associated type, and this type is known statically, before the program executes. Each use of each variable is checked by the compiler to prevent runtime type errors, including null reference errors, invalid field access and the like."]},{"l":"Types in Motoko","p":["Generaly speaking, we can categorize types into two groups: primitive types non-primitive values. This text focuses on primitive types mainly so we will explain them in more detail in the next chapture. To give you the contrast, let's quickly go through the primitive vs non-primitive values.","Primitive types in Motoko programming language are integers, natural numbers floating numbers, characters, texts and booleans.","Example of a primitive type, declaration of a variable that will have type of a natural number an is initialized with the value of 1:","Non-primitive values can be tuples, arrays, objects, variants, functions, async values or error values.","Example of a non-primitive type, declaring an array that b that can only contain natural numbers and is initialized with values 1, 2, 3:","You can easily experiment with types and run this sample code in the Motoko playground if you are not familiar with it you can follow Getting to know Motoko Playground tutorial."]},{"l":"Primitive types","p":["In this chapter, we will go through all of the primitive types and give you examples of how to declare variables and what can be assigned to them."]},{"l":"1. Unbounded Integers","p":["Unbounded integers can be assigned with positive or negative numbers. There are some ways how to declare an integer variable:","Let's make a little exercise now. Write a funciton called add, that will take two integers as arguments and return a sum of these two numbers.","That was quite easy, right? Try to experiment with it in the Candid UI."]},{"l":"2. Unbounded Natural numbers","p":["Unbounded natural numbers can be assigned with positive numbers only. Motoko program will trap if you try to assign a negative number."]},{"l":"3. Bounded numbers","p":["As integers can also go below zero, we have space for 256 numbers too but in the range from -128 to 127.","But if you try this your program will fail because we are overflowing the maximum value:","For Nat16 the maximum value that can be assigned is 65 535 (2^ 16) and for Int16 we have minimum –32768 and maximum –32767. The same logic applies for 32 and 64 size of a type. This gives you understanding of what value can be assigned to a variable of specific type and gives you freedom to decide which one to use when designing your own program.","If you try to run this program, it will trap. Motoko Playground is well prepared for this type of situations, it doesn't let you execute the program and shows you an explanatory error message:","In Motoko, these bounded numbers types are available:","Int16","Int32","Int64","Int8","Keep in mind, even if you have a value that would fit into a smaller size Nat/Int, you can only assign it if it has the same type. Something like this will not work in Motoko:","Nat16","Nat32","Nat64","Nat8","Overflowing the Nat8 value in Motoko Playground","This means that you can declare a variable:","To explain the pattern, each type consist of Nat/Int and a number. This number represents quantity of bits that will be assigned in memory of the computer for this specific type. For example Nat8 variable can be only assigned with values ranging from 0 to 255. This comes from a formula 2^ 8 = 256 so the maximum number is 255 as we are starting from 0.","Unbounded numbers variables can be assigned theoretically with numbers of any size. There are situations when you don't need this. For example if you want to declare a variable that will represent an age of a person. This variable should never exceed a number greater than 200. You might consider to use a bounded variable to be more memory effective."]},{"l":"4. Floating point numbers","p":["For decimal numbers Float type is available in Motoko. Here are some ways how to assign a value to declared float variable:"]},{"l":"5. Characters and text","p":["For single characters, there is a type called Char and for strings of characters a Text type. Be careful, char type must be assigned with single quotes and string types with double qoutes. Lets try to declare your own variables:","Let's create a funciton concat, that will take two strings a and b as arguments and will return a concatenated text of them both with a single space between them.","Exactly, you can use the # operator to concatenate strings in Motoko!"]},{"l":"6. Booleans","p":["For booleans we have a Bool type in Motoko. It can only hold a value either true or false."]},{"l":"Useful resources and links"}],[{"l":"How To Contribute","p":["Follow these basic steps to add tutorials and contribute:","Clone our docs repo git clone git@github.com:icdevs/ic_devs_org_tutorials.git","Navigate to the cloned repo root directory","Install Retype(this is a great open source tool that helped us to create these docs) npm install retypeapp --global","Run the site locally retype watch","Create a new tutorial","Create a file under the tutorials folder (i.e. 'motoko-basics.md')","Write the tutorial in Markdown ( Formatting rules)","Create a PR","That is it. Once we review the changes we will merge with our main branch and your tutorial will be live \uD83D\uDE80 \uD83D\uDE80 \uD83D\uDE80"]},{"i":"happy-coding","l":"Happy coding!!!"}]]